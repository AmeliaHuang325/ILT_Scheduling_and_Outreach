#install.packages("googlesheets4")

library(googlesheets4) # package to interface with google sheets
library(dplyr)
library(tidyr)
library(stringr)


# Import google sheet data and get authorization --------------------------
gs4_auth() # get authentication
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>% 
  janitor::clean_names()

# unlist all cells
sheet_unlisted <- as.data.frame(sapply(sheet, function(col) {
  sapply(col, function(cell) {
    if(length(cell) > 0) cell[[1]] else NA
  })
})) # The outer sapply iterates over the columns of the data frame df. 
#The inner sapply iterates over the individual cells of the current column.


# Select data needed ------------------------------------------------------

col_index <- which(sheet_unlisted[1, ] == "REMAINING")[1] # see where the word "remaining" is

sheet_selected <- sheet_unlisted %>%
  select(1:(col_index-1)) %>%  # select needed columns
  filter(row_number() < which(training == "TOTAL")[1]) #select needed rows

## generate new column name based on the first row
new_col_name <- sapply(1:ncol(sheet_selected), function(i) {
  val <- sheet_selected[1,i]
  
  # Check for NA values
  if (is.na(val)) {
    return(names(sheet_selected)[i])
  }
  
  # Check for numbers from 1 to 10
  if (str_detect(val, "^([1-9]|10)$")) {
    return(paste0("region ", val))
  } else {
    return(names(sheet_selected)[i])
  }
}) # if the row is number from 1-10 then use the number, otherwise copy the column name

# Assign the new values to the first row
#sheet_selected[1,] <- new_col_name

colnames(sheet_selected) <- new_col_name


# Generate a dataset for Dashboard ----------------------------------------

df_plotting <- sheet_selected %>% 
  slice(-1) %>% # remove the first row of the dataset
  select("training", starts_with("region")) %>% # select training and region data
  fill(!!names(sheet_selected)[1], .direction = "down") %>% #To fill NA values in the first column with the value from the row above
  filter(str_detect(as.character(.[[1]]), "[0-9]"))


df_s <- df_plotting %>% 
  pivot_longer(cols = starts_with("region"),
               names_to = "region",
               values_to = "states"
               )

df_s <- df_s %>% 
  select(training, states) %>% 
  na.omit() %>% 
  group_by(training, states) %>% 
  summarise(n_states = n())



  