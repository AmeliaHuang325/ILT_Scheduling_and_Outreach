sheet_selected <- sheet %>%
select(1:14) %>% # select needed columns
filter(row_number() < which(training == "TOTAL")[1]) %>% # select needed rows
rename_with(~ ifelse(.x[1] %in% 1:10, paste0("region ", .x[1]), .x), everything())
View(sheet_selected)
sheet_selected <- sheet %>%
select(1:14) %>% # select needed columns
filter(row_number() < which(training == "TOTAL")[1]) %>% # select needed rows
rename_with(~ ifelse(.x[1] %in% 1:10, paste0("region ", .x[1]), .x), everything())
View(sheet_selected)
View(sheet_selected)
sheet_selected <- sheet %>%
select(1:14)
View(sheet_selected)
View(sheet_selected)
View(sheet)
sheet_selected <- sheet %>%
rename_with(~ ifelse(.x[1] %in% 1:10, paste0("region ", .x[1]), .x), everything())
sheet_selected <- sheet %>%
setNames(ifelse(sheet[1, ] %in% 1:9, paste0("region ", sheet[1, ]), names(sheet)), names(sheet))
sheet_selected <- sheet %>%
setNames(ifelse([1, ] %in% 1:9, paste0("region ", [1, ]), names()), names())
new_names <- setNames(ifelse(sheet[1, ] %in% 1:9, paste0("region ", sheet[1, ]), names(sheet)), names(sheet))
View(new_names)
new_names
sheet_selected <- sheet %>%
rename_with(~ new_names)
View(sheet_selected)
first_row <- sheet[1, ]
View(first_row)
new_colnames <- ifelse(first_row %in% 1:9, paste0("region ", first_row), colnames(df))
new_colnames <- ifelse(first_row %in% 1:9, paste0("region ", first_row), colnames(sheet))
new_colnames
first_row <- as.numeric(as.character(df[1, ]))
first_row <- as.numeric(as.character(sheet[1, ]))
first_row
sheet[1, ]
first_row <- as.numeric(as.character(sheet[2, ]))
first_row
sheet[2, ]
first_row <- as.numeric(as.character(sheet[1, ]))
first_row
sheet[1, ]
as.character(sheet[1, ])
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names() %>%
mutate(across(where(is.list), ~ unlist(.)))
View(sheet)
as.character(sheet[1, ]
)
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names() %>%
mutate(across(everything(), ~ sapply(., unlist)))
as.character(sheet[1, ]
)
as.character(sheet)
df_reconstructed <- as.data.frame(matrix(ncol = ncol(sheet), nrow = nrow(sheet)))
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names()
df_reconstructed <- as.data.frame(matrix(ncol = ncol(sheet), nrow = nrow(sheet)))
for(i in 1:nrow(sheet)) {
for(j in 1:ncol(sheet)) {
df_reconstructed[i, j] <- sheet[[j]][[i]]
}
}
# Assign the cleaned column names
colnames(df_reconstructed) <- colnames(sheet)
df_reconstructed
View(df_reconstructed)
library(purrr)
sheet_unlisted <- sheet %>%
map_df(~ .x[[1]])
View(sheet_selected)
sheet_unlisted
as.character(sheet_unlisted[1, ])
sheet_selected <- sheet_unlisted %>%
rename_with(~ ifelse(.x[1] %in% 1:10, paste0("region ", .x[1]), .x), everything())
sheet_selected <- sheet_unlisted %>%
rename_with(~ ifelse(.x[1] %in% 1:10, paste0("region ", .x[1]), .x), everything())
View(sheet_selected)
first_row <- as.numeric(as.character(sheet_unlisted[1, ]))
sheet_unlisted <- sheet %>%
map_df(~ .x[[1]]) %>%  #  in purrr package, flatten list-columns in every cells
map_dfr(function(row) {
map(row, function(cell) {
if (!is.na(suppressWarnings(as.numeric(cell)))) {
return(as.numeric(cell))
} else {
return(cell)
}
})
})
View(sheet_unlisted)
sheet_unlisted <- sheet %>%
map_df(~ .x[[1]]) %>%  #  in purrr package, flatten list-columns in every cells
map_dfr(function(row) {
map(row, function(cell) {
if (!is.na(suppressWarnings(as.numeric(cell)))) {
return(as.numeric(cell))
} else {
return(cell)
}
})
})
View(sheet_unlisted)
View(sheet_unlisted)
View(sheet_unlisted)
View(sheet_unlisted)
sheet_unlisted <- sheet %>%
map_df(~ .x[[1]])  #  in purrr package, flatten list-columns in every cells
View(sheet_unlisted)
View(sheet)
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names()
sheet_unlisted <- sheet %>%
map_df(~ .x[[1]])  #  in purrr package, flatten list-columns in every cells
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names()
library(googlesheets4) # package to interface with google sheets
library(dplyr)
library(purrr)
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names()
sheet_unlisted <- sheet %>%
map_df(~ .x[[1]])  #  in purrr package, flatten list-columns in every cells
sheet_unlisted <- sheet %>%
map_df(~ .x[[1]])
View(sheet_unlisted)
sheet_unlisted <- sheet %>%
map_df(~ .x[[1]]) #  in purrr package, flatten list-columns in every cells
View(sheet_unlisted)
View(sheet)
sheet_unlisted <- sheet %>%
map_df(~ .x) #  in purrr package, flatten list-columns in every cells
sheet_unlisted <- sheet %>%
map_df(~ .x[]) #  in purrr package, flatten list-columns in every cells
sheet_unlisted <- sheet %>%
map_df(~ .x[[1]])
sheet_unlisted <- sheet %>%
map_df(~ if(length(.x) > 0) .x[[1]] else NA) #  in purrr package, flatten list-columns in every cells
sheet_unlisted <- sheet %>%
map_df(~ if(length(.x) > 0) .x[[1]] else NA) #  in purrr package, flatten list-columns in every cells
View(sheet_unlisted)
library(purrr)
sheet_unlisted <- sheet %>%
map_df(~ if(length(.x) > 0) .x[[1]] else NA) #  in purrr package, flatten list-columns in every cells
View(sheet_unlisted)
View(sheet)
View(sheet_unlisted)
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names()
sheet_unlisted <- sheet %>%
map_df(~ if(length(.x) > 0) .x[[1]] else NA) #  in purrr package, flatten list-columns in every cells
# The apply function with a margin of 1:2 will apply the function to each cell
sheet_unlisted <- apply(sheet, c(1, 2), `[[`, 1)
# The apply function with a margin of 1:2 will apply the function to each cell
sheet_unlisted <- apply(sheet, c(1, 2), `[[`, 1)
# Convert the matrix back to a data frame
sheet_unlisted <- as.data.frame(sheet_unlisted, stringsAsFactors = FALSE)
View(sheet_unlisted)
View(sheet)
View(sheet_unlisted)
as.character(sheet_unlisted)
View(sheet_unlisted)
str(sheet_unlisted)
sheet_unlisted <- sheet %>%
map_df(~ if(length(.x) > 0) .x[[1]] else NA) #  in purrr package, flatten list-columns in every cells
sheet_unlisted <- sheet %>%
map_dfr(~ as.data.frame(t(unlist(.x)))) #  in purrr package, flatten list-columns in every cells
View(sheet_unlisted)
View(sheet)
sheet_unlisted <- sheet %>%
map_dfc(~ as.data.frame(unlist(.x))) #  in purrr package, flatten list-columns in every cells
sheet_unlisted <- sheet %>%
map_dfc(~ as.data.frame(unlist(.x))) #  in purrr package, flatten list-columns in every cells
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names()
# Find the maximum length among all lists
max_length <- max(map_int(sheet, length))
# Pad shorter lists with NA
padded_sheet <- map(sheet, ~ {
current_length <- length(.x)
if (current_length < max_length) {
.x <- c(.x, rep(NA, max_length - current_length))
}
.x
})
# Now combine them into a data frame
sheet_unlisted <- padded_sheet %>%
map_dfc(~ as.data.frame(unlist(.x)))
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names()
# Find the maximum list length
max_length <- max(map_int(sheet, length))
# Equalize lengths
padded_sheet <- map(sheet, ~ {
.x_length <- length(.x)
if (.x_length < max_length) {
.x <- c(.x, rep(list(NA), max_length - .x_length))
}
unlist(.x)
})
# Convert to data frame
sheet_unlisted <- as.data.frame(padded_sheet, stringsAsFactors = FALSE)
sheet_unlisted <- sheet %>%
map_dfc(~ as.data.frame(unlist(.x))) #  in purrr package, flatten list-columns in every cells
sheet_unlisted <- sheet %>%
map_dfc(~ as.data.frame(unlist(.x))) #  in purrr package, flatten list-columns in every cells
sheet_unlisted <- as.data.frame(lapply(sheet, function(col) sapply(col, `[[`, 1)))
df_unlisted <- as.data.frame(sapply(sheet, function(col) {
sapply(col, function(cell) {
if(length(cell) > 0) cell[[1]] else NA
})
}))
View(df_unlisted)
sheet_unlisted <- as.data.frame(sapply(sheet, function(col) {
sapply(col, function(cell) {
if(length(cell) > 0) cell[[1]] else NA
})
}))
str(sheet_unlisted)
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names()
sheet_unlisted <- as.data.frame(sapply(sheet, function(col) {
sapply(col, function(cell) {
if(length(cell) > 0) cell[[1]] else NA
})
}))
View(sheet_unlisted)
column_position <- which(sheet_unlisted[1, ] == "REMAINING")
# If "remaining" is not found, it would return integer(0), so handle that case
if(length(column_position) > 0) {
# Subtract one to exclude the column with "remaining"
selected_data <- df %>%
select(1:(column_position - 1))
} else {
# If "remaining" is not found, you can choose to keep the original dataframe or handle it differently
selected_data <- df
}
col_index <- which(df[1, ] == "REMAINING")[1] # We take [1] in case there are multiple matches
col_index <- which(sheet_unlisted[1, ] == "REMAINING")[1] # We take [1] in case there are multiple matches
# Select all columns before it
selected_df <- sheet_unlisted %>%
select(1:(col_index-1))
View(selected_df)
# Select all columns before it
sheet_selected <- sheet_unlisted %>%
select(1:(col_index-1)) %>%  # select needed columns
filter(row_number() < which(training == "TOTAL")[1])
View(sheet_selected)
View(sheet_selected)
sheet_unlisted[1, ] <- as.numeric(as.character(sheet_unlisted[1, ]))
str(sheet_unlisted)
sheet_unlisted[1, ] <- as.numeric(as.character(sheet_unlisted[1, ]))
View(sheet_unlisted)
# Select all columns before it
sheet_selected <- sheet_unlisted %>%
select(1:(col_index-1)) %>%  # select needed columns
filter(row_number() < which(training == "TOTAL")[1]) %>%  #select needed rows
rename_with(~ ifelse(.x[1] %in% 1:9, paste0("region ", .x[1]), .x), everything())
View(sheet_selected)
is.numeric(sheet_unlisted[1, 12])
sheet_unlisted[1, 12]
View(sheet_unlisted)
unique(sheet_unlisted[1,])
names(sheet_selected)
sheet_selected_2 <- sheet_selected %>%
mutate(across(everything(),
~if_else(str_detect(.x[1], "^([1-9]|10)$"),
paste0("region ", .x[1]),
names(df)[which(names(df) == .col)],
.preserve = TRUE),
.names = "new_{.col}")) %>%
slice(1) %>%
bind_rows(slice(df, 2:n()))
sheet_selected_2 <- sheet_selected %>%
mutate(across(everything(),
~if_else(str_detect(.x[1], "^([1-9]|10)$"),
paste0("region ", .x[1]),
names(sheet_selected)[which(names(sheet_selected) == .col)],
.preserve = TRUE),
.names = "new_{.col}")) %>%
slice(1) %>%
bind_rows(slice(df, 2:n()))
sheet_selected_2 <- sheet_selected %>%
mutate(across(everything(),
~if_else(str_detect(.x[1], "^([1-9]|10)$"),
paste0("region ", .x[1]),
names(sheet_selected)[which(names(sheet_selected) == .col)]),
.names = "new_{.col}")) %>%
slice(1) %>%
bind_rows(slice(df, 2:n()))
sheet_selected_2 <- sheet_selected %>%
mutate(across(everything(),
~if_else(str_detect(.x[1], "^([1-9]|10)$"),
paste0("region ", .x[1]),
names(df)[which(names(df) == .col)]))) %>%
slice(1) %>%
bind_rows(slice(df, 2:n()))
sheet_selected[1,]
?if_else
library(stringr)
sheet_selected[1,] <- if_else(str_detect(.x[1], "^([1-9]|10)$"),
paste0("region ", .x[1]),
names(df)[which(names(df) == .col)])
sheet_selected[1,] <- if_else(str_detect(.x[1], "^([1-9]|10)$"),
paste0("region ", .x[1]),
names(sheet_selected)[which(names(sheet_selected) == .col)])
sheet_selected[1,] <- if_else(str_detect(x[1], "^([1-9]|10)$"),
paste0("region ", x[1]),
names(sheet_selected)[which(names(sheet_selected) == .col)])
sheet_selected[1,] <- if_else(str_detect([1], "^([1-9]|10)$"),
sheet_selected[1,] <- if_else(str_detect(.x[1], "^([1-9]|10)$"),
paste0("region ", .x[1]),
names(sheet_selected)[which(names(sheet_selected) == .col)])
new_row <- sapply(1:ncol(sheet_selected), function(i) {
val <- sheet_selected[1,i]
if (str_detect(val, "^([1-9]|10)$")) {
return(paste0("region ", val))
} else {
return(names(sheet_selected)[i])
}
})
new_row <- sapply(1:ncol(sheet_selected), function(i) {
val <- sheet_selected[1,i]
# Check for NA values
if (is.na(val)) {
return(names(sheet_selected)[i])
}
# Check for numbers from 1 to 10
if (str_detect(val, "^([1-9]|10)$")) {
return(paste0("region ", val))
} else {
return(names(sheet_selected)[i])
}
})
# Assign the new values to the first row
sheet_selected[1,] <- new_row
## generate new column name based on the first row
new_col_name <- sapply(1:ncol(sheet_selected), function(i) {
val <- sheet_selected[1,i]
# Check for NA values
if (is.na(val)) {
return(names(sheet_selected)[i])
}
# Check for numbers from 1 to 10
if (str_detect(val, "^([1-9]|10)$")) {
return(paste0("region ", val))
} else {
return(names(sheet_selected)[i])
}
})
# Assign the new values to the first row
sheet_selected[1,] <- new_col_name
View(sheet_selected)
## generate new column name based on the first row
new_col_name <- sapply(1:ncol(sheet_selected), function(i) {
val <- sheet_selected[1,i]
# Check for NA values
if (is.na(val)) {
return(names(sheet_selected)[i])
}
# Check for numbers from 1 to 10
if (str_detect(val, "^([1-9]|10)$")) {
return(paste0("region ", val))
} else {
return(names(sheet_selected)[i])
}
}) # if the row is number from 1-10 then use the number, otherwise copy the column name
# Assign the new values to the first row
sheet_selected[1,] <- new_col_name
View(sheet_selected)
# unlist all cells
sheet_unlisted <- as.data.frame(sapply(sheet, function(col) {
sapply(col, function(cell) {
if(length(cell) > 0) cell[[1]] else NA
})
})) # The outer sapply iterates over the columns of the data frame df.
col_index <- which(sheet_unlisted[1, ] == "REMAINING")[1] # see where the word "remaining" is
View(sheet_unlisted)
## generate new column name based on the first row
new_col_name <- sapply(1:ncol(sheet_unlisted), function(i) {
val <- sheet_selected[1,i]
# Check for NA values
if (is.na(val)) {
return(names(sheet_selected)[i])
}
# Check for numbers from 1 to 10
if (str_detect(val, "^([1-9]|10)$")) {
return(paste0("region ", val))
} else {
return(names(sheet_selected)[i])
}
}) # if the row is number from 1-10 then use the number, otherwise copy the column name
# Assign the new values to the first row
sheet_selected[1,] <- new_col_name
## generate new column name based on the first row
new_col_name <- sapply(1:ncol(sheet_unlisted), function(i) {
val <- sheet_selected[1,i]
# Check for NA values
if (is.na(val)) {
return(names(sheet_unlisted)[i])
}
# Check for numbers from 1 to 10
if (str_detect(val, "^([1-9]|10)$")) {
return(paste0("region ", val))
} else {
return(names(sheet_unlisted)[i])
}
}) # if the row is number from 1-10 then use the number, otherwise copy the column name
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names()
# unlist all cells
sheet_unlisted <- as.data.frame(sapply(sheet, function(col) {
sapply(col, function(cell) {
if(length(cell) > 0) cell[[1]] else NA
})
})) # The outer sapply iterates over the columns of the data frame df.
col_index <- which(sheet_unlisted[1, ] == "REMAINING")[1] # see where the word "remaining" is
## generate new column name based on the first row
new_col_name <- sapply(1:ncol(sheet_unlisted), function(i) {
val <- sheet_selected[1,i]
# Check for NA values
if (is.na(val)) {
return(names(sheet_unlisted)[i])
}
# Check for numbers from 1 to 10
if (str_detect(val, "^([1-9]|10)$")) {
return(paste0("region ", val))
} else {
return(names(sheet_unlisted)[i])
}
}) # if the row is number from 1-10 then use the number, otherwise copy the column name
## generate new column name based on the first row
new_col_name <- sapply(1:ncol(sheet_unlisted), function(i) {
val <- sheet_unlisted[1,i]
# Check for NA values
if (is.na(val)) {
return(names(sheet_unlisted)[i])
}
# Check for numbers from 1 to 10
if (str_detect(val, "^([1-9]|10)$")) {
return(paste0("region ", val))
} else {
return(names(sheet_unlisted)[i])
}
}) # if the row is number from 1-10 then use the number, otherwise copy the column name
# Assign the new values to the first row
sheet_unlisted[1,] <- new_col_name
View(sheet_unlisted)
sheet_selected <- sheet_unlisted %>%
select(1:(col_index-1)) %>%  # select needed columns
filter(row_number() < which(training == "TOTAL")[1])  #select needed rows
View(sheet_selected)
sheet_selected <- sheet_unlisted %>%
select(1:(col_index-1)) %>%  # select needed columns
filter(row_number() < which(training == "TOTAL")[1]) %>%  #select needed rows
rename_with(~ new_col_name)
# Assign the new values to the first row
sheet_unlisted[1,] <- new_col_name
View(sheet_unlisted)
sheet_selected <- sheet_unlisted %>%
select(1:(col_index-1)) %>%  # select needed columns
filter(row_number() < which(training == "TOTAL")[1]) %>%  #select needed rows
rename_with(~ as.character(unlist(.[1,])))
sheet_selected <- sheet_unlisted %>%
select(1:(col_index-1)) %>%  # select needed columns
filter(row_number() < which(training == "TOTAL")[1]) %>%  #select needed rows
rename_with(~ as.character(sheet_unlisted[1,]))
sheet_selected <- sheet_unlisted %>%
select(1:(col_index-1)) %>%  # select needed columns
filter(row_number() < which(training == "TOTAL")[1]) %>%  #select needed rows
rename_with(~ as.character(sheet_selected[1,]))
View(sheet_unlisted)
sheet_selected <- sheet_unlisted %>%
select(1:(col_index-1)) %>%  # select needed columns
filter(row_number() < which(training == "TOTAL")[1]) #select needed rows
View(sheet_selected)
colnames(sheet_selected) <- new_col_name
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names()
# unlist all cells
sheet_unlisted <- as.data.frame(sapply(sheet, function(col) {
sapply(col, function(cell) {
if(length(cell) > 0) cell[[1]] else NA
})
})) # The outer sapply iterates over the columns of the data frame df.
col_index <- which(sheet_unlisted[1, ] == "REMAINING")[1] # see where the word "remaining" is
sheet_selected <- sheet_unlisted %>%
select(1:(col_index-1)) %>%  # select needed columns
filter(row_number() < which(training == "TOTAL")[1]) #select needed rows
View(sheet_selected)
## generate new column name based on the first row
new_col_name <- sapply(1:ncol(sheet_selected), function(i) {
val <- sheet_selected[1,i]
# Check for NA values
if (is.na(val)) {
return(names(sheet_selected)[i])
}
# Check for numbers from 1 to 10
if (str_detect(val, "^([1-9]|10)$")) {
return(paste0("region ", val))
} else {
return(names(sheet_selected)[i])
}
}) # if the row is number from 1-10 then use the number, otherwise copy the column name
colnames(sheet_selected) <- new_col_name
View(sheet_selected)
View(sheet_selected)
df_plotting <- sheet_selected %>%
slice(-1)
View(df_plotting)
