names_to = "region",
values_to = "states"
)
df_s <- df_s %>%
select(training, states) %>%
na.omit() %>%
group_by(training, states) %>%
summarise(n_states = n())
library(rgdal)
library(tidyverse)
library(leaflet)
library(RColorBrewer)
library(DT)
library(shinyTree)
library(shinyWidgets)
# load data
dat <- readr::read_csv("data/2022 NCDP Disaster Mitigation State Bill Tracking_Public.csv") |>
janitor::clean_names() |>
select(state, bill_number, summary, hazard_type, ncdp_categories, subcategory)
# load data
source(Data Cleaning.R)
?source
# load data
source("Data Cleaning.R")
View(df_s)
View(df_s)
?n_distinct
temp <- df_s |>
group_by(states) |>
summarise(n_training = nrow(training)) |>
mutate(state_n = paste(states, "<br/>", "<br/>",
"(Total Number of Bills = ",
n_training,
")",
sep = "")) |>
select(states, state_n)
temp <- df_s |>
group_by(states)
View(temp)
temp <- df_s |>
mutate(state_n = paste(states, "<br/>", "<br/>",
"(Total Number of Training = ",
n_states,
")",
sep = "")) |>
select(states, state_n)
temp <- df_s |>
mutate(state_n = paste(states, "<br/>", "<br/>",
"(Total Number of Training = ",
n_states,
")",
sep = "")) |>
select(states, state_n)
View(temp)
View(df_s)
# load data
source("Data Cleaning.R") # source the data from the cleaned app
?group_by
df_s <- df_plotting %>%
pivot_longer(cols = starts_with("region"),
names_to = "region",
values_to = "states"
)
View(df_s)
df_s <- df_plotting %>%
pivot_longer(cols = starts_with("region"),
names_to = "region",
values_to = "states"
)
df_s <- df_s %>%
select(training, states) %>%
na.omit() %>%
group_by(training, states) %>%
summarise(n_each_course_states = n())
# load data
source("Data Cleaning.R") # source the data from the cleaned app
temp <- df_s |>
group_by(states) |>
mutate(n_course_state = sum(n_each_course_state))
View(temp)
temp <- df_s |>
group_by(states) |>
mutate(n_course_state = sum(n_each_course_state)) |>
mutate(state_n = paste(states, "<br/>", "<br/>",
"(Total Number of Training = ",
n_course_state,
")",
sep = ""))
View(temp)
# load data
source("Data Cleaning.R") # source the data from the cleaned app
temp <- df_s |>
group_by(states) |>
mutate(n_course_state = sum(n_each_course_state)) |>
mutate(state_n = paste(states, "<br/>", "<br/>",
"(Total Number of Training = ",
n_course_state,
")",
sep = ""))
View(temp)
View(df_s)
# load data
source("Data Cleaning.R") # source the data from the cleaned app
View(temp)
?structure
var_list <- list(
Housing = structure(list(
MGT_477 = structure("MGT-477", stselected=FALSE, sttype="default", sticon="file"),
MGT_472 = structure("MGT-472", stselected=FALSE, sttype="default", sticon="file")
), stselected=FALSE, sttype="default", sticon="file"),
Mass_Care = structure(list(
MGT_487 = structure("MGT-487", stselected=FALSE, sttype="default", sticon="file"),
PER_406 = structure("PER-406", stselected=FALSE, sttype="default", sticon="file")
), stselected=FALSE, sttype="default", sticon="file"),
Pandemic_Preparedness = structure(list(
MGT_488 = structure("MGT-488", stselected=FALSE, sttype="default", sticon="file"),
PER_409 = structure("PER-409", stselected=FALSE, sttype="default", sticon="file")
), stselected=FALSE, sttype="default", sticon="file"),
Climate_Equity = structure(list(
MGT_491 = structure("MGT-491", stselected=FALSE, sttype="default", sticon="file"),
PER_420 = structure("PER-420", stselected=FALSE, sttype="default", sticon="file")
), stselected=FALSE, sttype="default", sticon="file")
)
View(var_list)
# us map data
us_spdf <- rgdal::readOGR(
dsn= "data/cb_2018_us_state_20m",
verbose=FALSE
)
state.name <- read_xlsx("data/States_codes_regions.xlsx") |>
janitor::clean_names()
state.name <- xlsx::read.xlsx("data/States_codes_regions.xlsx") |>
janitor::clean_names()
state.name <- read.xlsx("data/States_codes_regions.xlsx") |>
janitor::clean_names()
?read.xlsx
state.name <- openxlsx::read.xlsx("data/States_codes_regions.xlsx") |>
janitor::clean_names()
state_name <- openxlsx::read.xlsx("data/States_codes_regions.xlsx") |>
janitor::clean_names()
# load data
source("Data Cleaning.R") # source the data from the cleaned app
dat <- df_s |>
group_by(states) |>
mutate(n_course_state = sum(n_each_course_state)) |>
mutate(state_n = paste(states, "<br/>", "<br/>",
"(Total Number of Training = ",
n_course_state,
")",
sep = ""))
state_name <- openxlsx::read.xlsx("data/States_codes_regions.xlsx") |>
janitor::clean_names()
var_list <- list(
Housing = structure(list(
MGT_477 = structure("MGT-477", stselected=FALSE, sttype="default", sticon="file"),
MGT_472 = structure("MGT-472", stselected=FALSE, sttype="default", sticon="file")
), stselected=FALSE, sttype="default", sticon="file"),
Mass_Care = structure(list(
MGT_487 = structure("MGT-487", stselected=FALSE, sttype="default", sticon="file"),
PER_406 = structure("PER-406", stselected=FALSE, sttype="default", sticon="file")
), stselected=FALSE, sttype="default", sticon="file"),
Pandemic_Preparedness = structure(list(
MGT_488 = structure("MGT-488", stselected=FALSE, sttype="default", sticon="file"),
PER_409 = structure("PER-409", stselected=FALSE, sttype="default", sticon="file")
), stselected=FALSE, sttype="default", sticon="file"),
Climate_Equity = structure(list(
MGT_491 = structure("MGT-491", stselected=FALSE, sttype="default", sticon="file"),
PER_420 = structure("PER-420", stselected=FALSE, sttype="default", sticon="file")
), stselected=FALSE, sttype="default", sticon="file")
)
# us map data
us_spdf <- rgdal::readOGR(
dsn= "data/cb_2018_us_state_20m",
verbose=FALSE
)
View(state_name)
View(dat)
?left_join()
dat_2 <- dat |>
left_join(state_name,by ="states", "state_2")
dat_2 <- dat |>
left_join(state_name,by = "state_2", "states")
dat_2 <- dat |>
right_join(state_name,by = "state_2", "states")
dat_2 <- dat |>
left_join(state_name,by = c("states"= "state_2"))
View(dat)
View(dat)
View(dat_2)
dat <- dat |>
left_join(state_name,by = c("states"= "state_2"))
dat <- dat |>
left_join(state_name,by = c("states"= "state_2"))
View(dat)
# load data
source("Data Cleaning.R") # source the data from the cleaned app
library(rgdal)
library(tidyverse)
library(leaflet)
library(RColorBrewer)
library(DT)
library(shinyTree)
library(shinyWidgets)
# load data
source("Data Cleaning.R") # source the data from the cleaned app
View(df_s)
dat <- df_s |>
group_by(states) |>
mutate(n_course_state = sum(n_each_course_state)) |>
mutate(state_n = paste(states, "<br/>", "<br/>",
"(Total Number of Training = ",
n_course_state,
")",
sep = ""))
state_name <- openxlsx::read.xlsx("data/States_codes_regions.xlsx") |>
janitor::clean_names()
dat <- dat |>
left_join(state_name,by = c("states"= "state_2"))
View(dat)
View(dat)
remove(dat)
dat <- df_s |>
group_by(states) |>
mutate(n_course_state = sum(n_each_course_state)) |>
mutate(state_n = paste(states, "<br/>", "<br/>",
"(Total Number of Training = ",
n_course_state,
")",
sep = ""))
View(dat)
state_name <- openxlsx::read.xlsx("data/States_codes_regions.xlsx") |>
janitor::clean_names()
dat <- dat |>
left_join(state_name,by = c("states"= "state_2")) |>
group_by(region) |>
mutate(n_course_region = sum(n_each_course_state))
View(dat)
shiny::runApp()
View(dat)
runApp()
install.packages("plotly")
library(plotly)
runApp()
runApp()
runApp()
runApp()
runApp()
# Filter data based on selected courses from the tree
# selected_course <- unlist(input$tree) # Extract selected courses
selected_course <- c("MGT-477", "MGT-472")
print(selected_course) # Debugging line
if(length(selected_course) > 0){
dat_filtered <- dat %>%
filter(training %in% selected_course)
print(dat_filtered) # Debugging line
plot_data <- dat_filtered %>%
group_by(region, training) %>%
summarize(total_courses = sum(n_each_course_state)) %>%
ungroup()
print(plot_data) # Debugging line
plot_ly(data = plot_data,
x = ~region,
y = ~total_courses,
color = ~training,
type = "bar",
colors = RColorBrewer::brewer.pal(n=length(unique(dat_filtered$training)), name="Set1")) %>%
layout(barmode = "stack")
} else {
plot_ly(type = "bar") # Empty chart
}
# Filter data based on selected courses from the tree
# selected_course <- unlist(input$tree) # Extract selected courses
selected_course <- c("MGT-477")
print(selected_course) # Debugging line
if(length(selected_course) > 0){
dat_filtered <- dat %>%
filter(training %in% selected_course)
print(dat_filtered) # Debugging line
plot_data <- dat_filtered %>%
group_by(region, training) %>%
summarize(total_courses = sum(n_each_course_state)) %>%
ungroup()
print(plot_data) # Debugging line
plot_ly(data = plot_data,
x = ~region,
y = ~total_courses,
color = ~training,
type = "bar",
colors = RColorBrewer::brewer.pal(n=length(unique(dat_filtered$training)), name="Set1")) %>%
layout(barmode = "stack")
} else {
plot_ly(type = "bar") # Empty chart
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Import google sheet data and get authorization --------------------------
#gs4_auth() # get authentication
sheet <- read("data/Instructor-led Trainings Scheduling & Outreach - Scheduling.csv") %>%
janitor::clean_names()
#library(googlesheets4) # package to interface with google sheets
library(dplyr)
# Import google sheet data and get authorization --------------------------
#gs4_auth() # get authentication
sheet <- read("data/Instructor-led Trainings Scheduling & Outreach - Scheduling.csv") %>%
janitor::clean_names()
# Import google sheet data and get authorization --------------------------
#gs4_auth() # get authentication
sheet <- read.csv("data/Instructor-led Trainings Scheduling & Outreach - Scheduling.csv") %>%
janitor::clean_names()
View(sheet)
shiny::runApp()
runApp()
# Import google sheet data and get authorization --------------------------
#gs4_auth() # get authentication
sheet <- read.csv("data/Instructor-led Trainings Scheduling & Outreach - Scheduling.csv") %>%
janitor::clean_names()
View(sheet)
# unlist all cells
sheet_unlisted <- as.data.frame(sapply(sheet, function(col) {
sapply(col, function(cell) {
if(length(cell) > 0) cell[[1]] else NA
})
})) # The outer sapply iterates over the columns of the data frame df.
col_index <- which(sheet_unlisted[1, ] == "REMAINING")[1] # see where the word "remaining" is
sheet_selected <- sheet_unlisted %>%
select(1:(col_index-1)) %>%  # select needed columns
filter(row_number() < which(training == "TOTAL")[1]) #select needed rows
## generate new column name based on the first row
new_col_name <- sapply(1:ncol(sheet_selected), function(i) {
val <- sheet_selected[1,i]
# Check for NA values
if (is.na(val)) {
return(names(sheet_selected)[i])
}
# Check for numbers from 1 to 10
if (str_detect(val, "^([1-9]|10)$")) {
return(paste0("region ", val))
} else {
return(names(sheet_selected)[i])
}
}) # if the row is number from 1-10 then use the number, otherwise copy the column name
colnames(sheet_selected) <- new_col_name
df_plotting <- sheet_selected %>%
slice(-1) %>% # remove the first row of the dataset
select("training", starts_with("region")) %>% # select training and region data
fill(!!names(sheet_selected)[1], .direction = "down") %>% #To fill NA values in the first column with the value from the row above
filter(str_detect(as.character(.[[1]]), "[0-9]"))
df_s <- df_plotting %>%
pivot_longer(cols = starts_with("region"),
names_to = "region",
values_to = "states"
)
df_s <- df_s %>%
select(training, states) %>%
na.omit() %>%
group_by(training, states) %>%
summarise(n_each_course_state = n())
View(df_s)
# Import google sheet data and get authorization --------------------------
gs4_auth() # get authentication
library(googlesheets4) # package to interface with google sheets
# Import google sheet data and get authorization --------------------------
gs4_auth() # get authentication
sheet <- sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names()
sheet <- sheets("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names()
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat <- df_s |>
group_by(states) |>
mutate(n_course_state = sum(n_each_course_state)) |>
mutate(state_n = paste(states, "<br/>", "<br/>",
"(Total Number of Training = ",
n_course_state,
")",
sep = ""))
state_name <- openxlsx::read.xlsx("data/States_codes_regions.xlsx") |>
janitor::clean_names()
dat <- dat |>
left_join(state_name,by = c("states"= "state_2"))
View(dat)
remove(dat)
dat <- df_s |>
group_by(states) |>
mutate(n_course_state = sum(n_each_course_state)) |>
mutate(state_n = paste(states, "<br/>", "<br/>",
"(Total Number of Training = ",
n_course_state,
")",
sep = ""))
dat <- df_s |>
group_by(states) |>
mutate(n_course_state = sum(n_each_course_state)) |>
mutate(state_n = paste(states, "<br/>", "<br/>",
"(Total Number of Training = ",
n_course_state,
")",
sep = ""))
dat <- df_s |>
group_by(states) |>
mutate(n_course_state = sum(n_each_course_state)) |>
mutate(state_n = paste(states, "<br/>", "<br/>",
"(Total Number of Training = ",
n_course_state,
")",
sep = ""))
state_name <- openxlsx::read.xlsx("data/States_codes_regions.xlsx") |>
janitor::clean_names()
dat <- dat |>
left_join(state_name,by = c("states"= "state_2")) |>
mutate(region_2 = ifelse(!is.na(region),
paste0("REGION ", as.roman(region)),
NA))
View(dat)
runApp()
# Import google sheet data and get authorization --------------------------
#gs4_auth() # get authentication
auth_url <- gargle::gargle_oauth_app_url()
# Import google sheet data and get authorization --------------------------
gs4_auth() # get authentication
test <- read_csv("data/Instructor-led Trainings Scheduling & Outreach - Scheduling.csv")
View(test)
View(sheet)
View(test)
View(dat)
View(sheet)
# Import google sheet data and get authorization --------------------------
gs4_auth() # get authentication
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1MJDXdoWOK-sEFnCqOtdVlbB0XcQGF32-8iGKS8UvmjE/edit") %>%
janitor::clean_names()
test <- read_csv("data/Instructor-led Trainings Scheduling & Outreach - Scheduling.csv")
View(test)
View(sheet)
View(test)
# unlist all cells
sheet_unlisted <- as.data.frame(sapply(sheet, function(col) {
sapply(col, function(cell) {
if(length(cell) > 0) cell[[1]] else NA
})
})) # The outer sapply iterates over the columns of the data frame df.
View(sheet)
sheet <- read_csv("data/Instructor-led Trainings Scheduling & Outreach - Scheduling.csv") %>%
janitor::clean_names()
col_index <- which(sheet[1, ] == "REMAINING")[1] # see where the word "remaining" is
sheet_selected <- sheet %>%
select(1:(col_index-1)) %>%  # select needed columns
filter(row_number() < which(training == "TOTAL")[1]) #select needed rows
View(sheet_selected)
## generate new column name based on the first row
new_col_name <- sapply(1:ncol(sheet_selected), function(i) {
val <- sheet_selected[1,i]
# Check for NA values
if (is.na(val)) {
return(names(sheet_selected)[i])
}
# Check for numbers from 1 to 10
if (str_detect(val, "^([1-9]|10)$")) {
return(paste0("region ", val))
} else {
return(names(sheet_selected)[i])
}
}) # if the row is number from 1-10 then use the number, otherwise copy the column name
colnames(sheet_selected) <- new_col_name
df_plotting <- sheet_selected %>%
slice(-1) %>% # remove the first row of the dataset
select("training", starts_with("region")) %>% # select training and region data
fill(!!names(sheet_selected)[1], .direction = "down") %>% #To fill NA values in the first column with the value from the row above
filter(str_detect(as.character(.[[1]]), "[0-9]"))
df_s <- df_plotting %>%
pivot_longer(cols = starts_with("region"),
names_to = "region",
values_to = "states"
)
df_s <- df_s %>%
select(training, states) %>%
na.omit() %>%
group_by(training, states) %>%
summarise(n_each_course_state = n())
View(df_s)
runApp()
rsconnect::deployApp
runApp()
here::here("Data Cleaning_csv.R")
here::here("data/fema_regions")
runApp()
here::here("Data Cleaning_csv.R")
runApp()
here::here("Data_Cleaning_csv.R")
runApp()
shiny::runApp()
